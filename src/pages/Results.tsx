import React, { useState, useRef } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';
// import { getCyclePhaseDisplayName } from '../logic/hormones/cycleUtils';
import styles from './Results.module.css';

const Results: React.FC = () => {
  const location = useLocation();
  const navigate = useNavigate();
  const reportRef = useRef<HTMLDivElement>(null);
  
  // Accept new result object shape from navigation
  const result = location.state?.result;
  
  // State for email functionality
  const [email, setEmail] = useState('');
  const [emailSent, setEmailSent] = useState(false);
  const [showEmailInput, setShowEmailInput] = useState(false);

  const handleRestart = () => {
    navigate('/survey');
  };

  const handleEmailSubmit = async () => {
    if (email && isValidEmail(email)) {
      try {
        // Save email to API
        const response = await fetch('/api/save-email', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            email,
            responseId: location.state?.responseId,
            timestamp: new Date().toISOString()
          })
        });

        if (response.ok) {
          console.log('Email saved successfully');
        } else {
          console.error('Failed to save email');
        }
      } catch (error) {
        console.error('Error saving email:', error);
      }

      // Create email content with hormone results
      const subject = 'My Hormone Health Report';
      const body = createEmailBody(result);
      const mailtoLink = `mailto:?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`;
      
      // Open email client
      window.open(mailtoLink);
      setEmailSent(true);
      setShowEmailInput(false);
    }
  };

  const createEmailBody = (result: any) => {
    let body = 'My Hormone Health Assessment Results\n\n';
    body += `Primary Imbalance: ${result.primaryImbalance}\n`;
    if (result.secondaryImbalances && result.secondaryImbalances.length > 0) {
      body += `Secondary Imbalances: ${result.secondaryImbalances.join(', ')}\n`;
    }
    body += `Cycle Phase: ${result.cyclePhase}\n`;
    body += `Confidence Level: ${result.confidence}\n\n`;
    
    if (result.explanations) {
      body += 'Explanations:\n';
      Object.entries(result.explanations || {}).forEach(([hormone, explanation]) => {
        body += `${hormone}: ${explanation}\n`;
      });
    }
    
    if (result.conflicts && Array.isArray(result.conflicts) && result.conflicts.length > 0) {
      body += '\nImportant Notes:\n';
      result.conflicts.forEach((conflict: string) => {
        body += `- ${conflict}\n`;
      });
    }
    
    body += '\nThis report was generated by the Hormone Health Assessment app.';
    return body;
  };

  const isValidEmail = (email: string) => {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  };

  const handleDownloadPDF = async () => {
    if (!reportRef.current) return;
    
    try {
      // Dynamic import for html2canvas and jsPDF
      const html2canvas = (await import('html2canvas')).default;
      const jsPDF = (await import('jspdf')).default;
      
      const canvas = await html2canvas(reportRef.current, {
        scale: 2,
        useCORS: true,
        allowTaint: true,
        backgroundColor: '#ffffff'
      });
      
      const imgData = canvas.toDataURL('image/png');
      const pdf = new jsPDF('p', 'mm', 'a4');
      const imgWidth = 210;
      const pageHeight = 295;
      const imgHeight = (canvas.height * imgWidth) / canvas.width;
      let heightLeft = imgHeight;
      let position = 0;
      
      pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
      heightLeft -= pageHeight;
      
      while (heightLeft >= 0) {
        position = heightLeft - imgHeight;
        pdf.addPage();
        pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
        heightLeft -= pageHeight;
      }
      
      pdf.save('hormone-health-report.pdf');
    } catch (error) {
      console.error('Error generating PDF:', error);
      alert('Unable to generate PDF. Please try again.');
    }
  };

  // Helper function to get hormone display name
  const getHormoneName = (hormone: string) => {
    const names: Record<string, string> = {
      androgens: 'Androgens',
      progesterone: 'Progesterone',
      estrogen: 'Estrogen',
      thyroid: 'Thyroid',
      cortisol: 'Cortisol',
      insulin: 'Insulin'
    };
    return names[hormone] || hormone;
  };

  // Helper function to get hormone description
  const getHormoneDescription = (hormone: string) => {
    const descriptions: Record<string, string> = {
      androgens: 'High androgen levels can cause acne, hair loss, and irregular periods.',
      progesterone: 'Low progesterone can cause PMS symptoms, mood swings, and irregular cycles.',
      estrogen: 'Estrogen dominance can cause heavy periods, bloating, and breast tenderness.',
      thyroid: 'Thyroid issues can cause fatigue, weight changes, and mood problems.',
      cortisol: 'High cortisol from stress can affect energy, sleep, and hormone balance.',
      insulin: 'Insulin resistance can cause sugar cravings, weight gain, and PCOS symptoms.'
    };
    return descriptions[hormone] || 'This hormone may be contributing to your symptoms.';
  };

  // Helper function to get confidence level display
  const getConfidenceDisplay = (confidence: string) => {
    const confidenceInfo = {
      high: { text: 'High Confidence', color: '#4CAF50', icon: '🎯' },
      medium: { text: 'Medium Confidence', color: '#FF9800', icon: '⚠️' },
      low: { text: 'Low Confidence', color: '#F44336', icon: '❓' }
    };
    return confidenceInfo[confidence as keyof typeof confidenceInfo] || confidenceInfo.low;
  };

  // Helper function to get cycle phase display
  const getCyclePhaseDisplay = (phase: string) => {
    const phaseInfo = {
      follicular: { text: 'Follicular Phase', description: 'Building up to ovulation' },
      ovulatory: { text: 'Ovulatory Phase', description: 'Ovulation occurring' },
      luteal: { text: 'Luteal Phase', description: 'Post-ovulation, preparing for period' },
      menstrual: { text: 'Menstrual Phase', description: 'Period occurring' },
      unknown: { text: 'Unknown Phase', description: 'Unable to determine cycle phase' }
    };
    return phaseInfo[phase as keyof typeof phaseInfo] || phaseInfo.unknown;
  };

  // Helper function to categorize explanations
  const categorizeExplanations = (explanations: string[]) => {
    const categories = {
      symptoms: [] as string[],
      labs: [] as string[],
      conflicts: [] as string[],
      general: [] as string[]
    };

    // Ensure explanations is an array
    const explanationsArray = Array.isArray(explanations) ? explanations : [];

    explanationsArray.forEach(explanation => {
      if (explanation.includes('lab') || explanation.includes('Lab') || explanation.includes('added +2')) {
        categories.labs.push(explanation);
      } else if (explanation.includes('conflict') || explanation.includes('low labs') || explanation.includes('despite')) {
        categories.conflicts.push(explanation);
      } else if (explanation.includes('symptom') || explanation.includes('indicate') || explanation.includes('suggest')) {
        categories.symptoms.push(explanation);
      } else {
        categories.general.push(explanation);
      }
    });

    return categories;
  };

  // If no result data, show loading or error
  if (!result || !result.primaryImbalance) {
    return (
      <div className={styles.container}>
        <div className={styles.header}>
          <h1 className={styles.title}>Analysis Complete</h1>
          <p className={styles.subtitle}>
            Unable to analyze your responses. Please try again.
          </p>
        </div>
        <div className={styles.actions}>
          <button className={styles.actionButton} onClick={handleRestart}>
            Take Assessment Again
          </button>
        </div>
      </div>
    );
  }

  const confidenceInfo = getConfidenceDisplay(result.confidence);
  const cyclePhaseInfo = getCyclePhaseDisplay(result.cyclePhase);
  const categorizedExplanations = categorizeExplanations(result.explanations || []);

  return (
    <div className={styles.container}>
      <div className={styles.header}>
        <h1 className={styles.title}>Your Hormone Analysis</h1>
        <p className={styles.subtitle}>
          Based on your responses and lab data, here's what we found:
        </p>
        
        {/* Confidence Level Display */}
        <div className={styles.confidenceBadge} style={{ backgroundColor: confidenceInfo.color }}>
          <span className={styles.confidenceIcon}>{confidenceInfo.icon}</span>
          <span className={styles.confidenceText}>{confidenceInfo.text}</span>
        </div>

        {/* Cycle Phase Display */}
        {result.cyclePhase && result.cyclePhase !== 'unknown' && (
          <div className={styles.cyclePhaseInfo}>
            <h3>Current Cycle Phase</h3>
            <p className={styles.cyclePhaseName}>{cyclePhaseInfo.text}</p>
            <p className={styles.cyclePhaseDescription}>{cyclePhaseInfo.description}</p>
          </div>
        )}
      </div>

      {/* Report Content (for PDF capture) */}
      <div ref={reportRef} className={styles.reportContent}>
        <div className={styles.resultsContainer}>
          {/* Primary Imbalance */}
          <div className={styles.primaryResult}>
            <h2 className={styles.resultTitle}>Primary Hormone Issue</h2>
            <div className={styles.hormoneCard}>
              <div className={styles.hormoneHeader}>
                <h3 className={styles.hormoneName}>
                  {getHormoneName(result.primaryImbalance)}
                </h3>
                <span className={`${styles.level} ${styles.high}`}>
                  High Priority
                </span>
              </div>
              <p className={styles.description}>
                {getHormoneDescription(result.primaryImbalance)}
              </p>
              {/* Explanation for primary */}
              {result.explanations && result.explanations[result.primaryImbalance] && (
                <div className={styles.scoreInfo}>
                  <span className={styles.scoreLabel}>Explanation:</span>
                  <span className={styles.scoreValue}>{result.explanations[result.primaryImbalance]}</span>
                </div>
              )}
            </div>
          </div>

          {/* Secondary Imbalances */}
          {result.secondaryImbalances && result.secondaryImbalances.length > 0 && (
            <div className={styles.secondaryResult}>
              <h2 className={styles.resultTitle}>Secondary Hormone Issues</h2>
              {result.secondaryImbalances.map((hormone: string, index: number) => (
                <div key={index} className={styles.hormoneCard}>
                  <div className={styles.hormoneHeader}>
                    <h3 className={styles.hormoneName}>
                      {getHormoneName(hormone)}
                    </h3>
                    <span className={`${styles.level} ${styles.normal}`}>
                      Moderate
                    </span>
                  </div>
                  <p className={styles.description}>
                    {getHormoneDescription(hormone)}
                  </p>
                  {/* Explanation for secondary */}
                  {result.explanations && result.explanations[hormone] && (
                    <div className={styles.scoreInfo}>
                      <span className={styles.scoreLabel}>Explanation:</span>
                      <span className={styles.scoreValue}>{result.explanations[hormone]}</span>
                    </div>
                  )}
                </div>
              ))}
            </div>
          )}

          {/* Conflicts */}
          {result.conflicts && result.conflicts.length > 0 && (
            <div className={styles.explanationsSection}>
              <h2 className={styles.resultTitle}>⚠️ Important Notes</h2>
              <ul className={styles.explanationList}>
                {result.conflicts.map((conflict: string, idx: number) => (
                  <li key={idx} className={`${styles.explanationItem} ${styles.conflictItem}`}>
                    {conflict}
                  </li>
                ))}
              </ul>
            </div>
          )}

          {/* Detailed Explanations */}
          <div className={styles.explanationsSection}>
            <h2 className={styles.resultTitle}>Analysis Details</h2>
            
            {/* Symptom-Based Explanations */}
            {categorizedExplanations.symptoms.length > 0 && (
              <div className={styles.explanationCategory}>
                <h3 className={styles.explanationTitle}>📋 Symptom Analysis</h3>
                <ul className={styles.explanationList}>
                  {categorizedExplanations.symptoms.map((explanation: string, index: number) => (
                    <li key={index} className={styles.explanationItem}>
                      {explanation}
                    </li>
                  ))}
                </ul>
              </div>
            )}

            {/* Lab-Based Explanations */}
            {categorizedExplanations.labs.length > 0 && (
              <div className={styles.explanationCategory}>
                <h3 className={styles.explanationTitle}>🧪 Lab Results Analysis</h3>
                <ul className={styles.explanationList}>
                  {categorizedExplanations.labs.map((explanation: string, index: number) => (
                    <li key={index} className={styles.explanationItem}>
                      {explanation}
                    </li>
                  ))}
                </ul>
              </div>
            )}

            {/* General Explanations */}
            {categorizedExplanations.general.length > 0 && (
              <div className={styles.explanationCategory}>
                <h3 className={styles.explanationTitle}>ℹ️ Additional Information</h3>
                <ul className={styles.explanationList}>
                  {categorizedExplanations.general.map((explanation: string, index: number) => (
                    <li key={index} className={styles.explanationItem}>
                      {explanation}
                    </li>
                  ))}
                </ul>
              </div>
            )}
          </div>

          {/* Recommendations */}
          <div className={styles.recommendations}>
            <h2 className={styles.resultTitle}>Next Steps & Recommendations</h2>
            <ul className={styles.recommendationList}>
              <li className={styles.recommendation}>
                <strong>Medical Consultation:</strong> Consider consulting with a healthcare provider for comprehensive hormone testing
              </li>
              <li className={styles.recommendation}>
                <strong>Stress Management:</strong> Focus on stress management techniques like meditation or yoga
              </li>
              <li className={styles.recommendation}>
                <strong>Diet & Nutrition:</strong> Maintain a balanced diet rich in whole foods and fiber
              </li>
              <li className={styles.recommendation}>
                <strong>Lifestyle:</strong> Get adequate sleep and regular exercise to support hormone balance
              </li>
              <li className={styles.recommendation}>
                <strong>Tracking:</strong> Track your symptoms and cycle patterns for better understanding
              </li>
            </ul>
          </div>

          <div className={styles.linksSection}>
            <h2 className={styles.resultTitle}>Join Us on the Journey</h2>
            <p className={styles.description}>
              We're building something meaningful for your hormone health. Stay connected, explore our content, and be among the first to experience it.
            </p>
            <ul className={styles.linkList}>
              <li className={styles.linkItem}>
                <a href="https://www.instagram.com/myauvra/" target="_blank" rel="noopener noreferrer" className={styles.iconLink}>
                  <span className={styles.icon}>👉</span>
                  Follow us on Instagram
                </a>
              </li>
              <li className={styles.linkItem}>
                <a href="https://forms.fillout.com/t/x8xyYYpek3us" target="_blank" rel="noopener noreferrer" className={styles.textLink}>
                  🚀 Join our Waitlist – Be the First to Know!
                </a>
              </li>
              <li className={styles.linkItem}>
                <a href="https://www.linkedin.com/company/hormone-insight/" target="_blank" rel="noopener noreferrer" className={styles.iconLink}>
                  <span className={styles.icon}>👔</span>
                  Connect with us on LinkedIn
                </a>
              </li>
            </ul>
          </div>

          {/* Email Input Section */}
          <div className={styles.emailSection}>
            {!emailSent && !showEmailInput ? (
              <button 
                className={styles.emailButton}
                onClick={() => setShowEmailInput(true)}
              >
                📧 Want to receive this report via email?
              </button>
            ) : showEmailInput && !emailSent ? (
              <div className={styles.emailInputContainer}>
                <label htmlFor="email" className={styles.emailLabel}>
                  Enter your email address:
                </label>
                <input
                  id="email"
                  type="email"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  placeholder="your.email@example.com"
                  className={styles.emailInput}
                />
                <div className={styles.emailActions}>
                  <button 
                    className={styles.sendEmailButton}
                    onClick={handleEmailSubmit}
                    disabled={!email || !isValidEmail(email)}
                  >
                    Send PDF to My Email
                  </button>
                  <button 
                    className={styles.cancelEmailButton}
                    onClick={() => {
                      setShowEmailInput(false);
                      setEmail('');
                    }}
                  >
                    Cancel
                  </button>
                </div>
              </div>
            ) : (
              <div className={styles.emailSuccess}>
                <span className={styles.successIcon}>✅</span>
                <span>Thanks! We'll send it shortly.</span>
              </div>
            )}
          </div>

          {/* Action Buttons */}
          <div className={styles.actionGroup}>
            <button className={styles.downloadButton} onClick={handleDownloadPDF}>
              📄 Download My Hormone Report (PDF)
            </button>
            <button className={styles.restartButton} onClick={handleRestart}>
              🔁 Start Over
            </button>
          </div>

          <div className={styles.disclaimer}>
            This analysis is for informational purposes only and should not replace professional medical advice. 
            Always consult with a qualified healthcare provider for diagnosis and treatment.
          </div>
        </div>
      </div>
    </div>
  );
};

export default Results; 